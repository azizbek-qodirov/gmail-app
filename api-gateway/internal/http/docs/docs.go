// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/attachment": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new attachment associated with an outbox message.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "07-Attachments"
                ],
                "summary": "Create a new attachment",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Attachment file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Attachment created successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.AttachmentCreateRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/attachment/my-uploads": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all attachments associated with the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "07-Attachments"
                ],
                "summary": "Get my uploads",
                "responses": {
                    "200": {
                        "description": "Attachments retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.AttachmentGetAllRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Attachments not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/attachment/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an attachment by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "07-Attachments"
                ],
                "summary": "Delete an attachment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Attachment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Attachment deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Attachment not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/attachment/{outbox_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all attachments associated with an outbox message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "07-Attachments"
                ],
                "summary": "Get attachments for an outbox message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outbox message ID",
                        "name": "outbox_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by MIME type",
                        "name": "mime_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by creation date (from)",
                        "name": "created_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by creation date (to)",
                        "name": "created_to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of attachments per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attachments retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.AttachmentGetAllRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Attachments not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/confirm-registration": {
            "post": {
                "description": "Confirms a user's registration using the code sent to their email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "01-Authentication"
                ],
                "summary": "Confirm registration with code",
                "parameters": [
                    {
                        "description": "Confirmation request",
                        "name": "confirmation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.ConfirmUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/token.Tokens"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Incorrect verification code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Verification code expired or email not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/delete-account": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes the user's account permanently.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "03-User-profile"
                ],
                "summary": "Delete user account",
                "responses": {
                    "200": {
                        "description": "Account deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/draft": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new draft message. Use empty string in order to not to use this field.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "05-Draft"
                ],
                "summary": "Create a new draft",
                "parameters": [
                    {
                        "description": "Draft creation request",
                        "name": "draft",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.DraftCreateUpdateBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Draft created successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/draft/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a draft message with the provided ID. Use empty string in order to not to use this field.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "05-Draft"
                ],
                "summary": "Update an existing draft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Draft ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Draft update request",
                        "name": "draft",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.DraftCreateUpdateBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Draft updated successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Draft not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a draft message with the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "05-Draft"
                ],
                "summary": "Delete a draft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Draft ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Draft deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Draft not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/draft/{id}/send": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a draft message with the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "05-Draft"
                ],
                "summary": "Send a draft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Draft ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Draft sent successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.MessageSentRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Draft not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/forgot-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a confirmation code to email recovery password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "02-Password-recovery"
                ],
                "summary": "Forgot passwrod",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.ByEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Page not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inbox": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all inbox messages for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "04-Inbox"
                ],
                "summary": "Get all inbox messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by sender ID",
                        "name": "sender_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by message type (to, cc, bcc)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by spam status",
                        "name": "is_spam",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by archived status",
                        "name": "is_archived",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by starred status",
                        "name": "is_starred",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by if it is in trash",
                        "name": "is_trashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by sent date (from)",
                        "name": "sent_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by sent date (to)",
                        "name": "sent_to",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by unread messages only",
                        "name": "unread_only",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of messages per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inbox messages retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.InboxMessagesGetAllRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inbox/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves an inbox message by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "04-Inbox"
                ],
                "summary": "Get inbox message by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inbox message retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.InboxMessageGetRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Inbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Permanently deletes an inbox message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "04-Inbox"
                ],
                "summary": "Delete inbox message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Inbox message deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Inbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inbox/{id}/archive": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Archives or unarchives an inbox message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "04-Inbox"
                ],
                "summary": "Archive inbox message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inbox message archived/unarchived successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Inbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inbox/{id}/read": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks an inbox message as read.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "04-Inbox"
                ],
                "summary": "Mark inbox message as read",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inbox message marked as read successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Inbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inbox/{id}/spam": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks an inbox message as spam or unspam if alreadys spammed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "04-Inbox"
                ],
                "summary": "Mark inbox message as spam/unspam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inbox message marked as spam successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Inbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inbox/{id}/star": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stars or unstars an inbox message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "04-Inbox"
                ],
                "summary": "Star inbox message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inbox message starred/unstarred successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Inbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inbox/{id}/trash": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Moves an inbox message to the trash folder.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "04-Inbox"
                ],
                "summary": "Move inbox message to trash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Inbox message moved to trash successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Inbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "01-Authentication"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.LoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/token.Tokens"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logs out the user by blacklisting their refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "01-Authentication"
                ],
                "summary": "Logout a user",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/outbox": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all outbox messages for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "06-Outbox"
                ],
                "summary": "Get all outbox messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by archived status",
                        "name": "is_archived",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by if it is in trash",
                        "name": "is_trashed",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by draft status",
                        "name": "is_draft",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by starred status",
                        "name": "is_starred",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by sent date (from). syntax: 2024-09-07T12:18:28+00:00",
                        "name": "sent_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by sent date (to). syntax: 2024-09-07T12:18:28+00:00",
                        "name": "sent_to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of messages per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outbox messages retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.OutboxMessagesGetAllRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a new message to the specified recipients.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "06-Outbox"
                ],
                "summary": "Send a new message",
                "parameters": [
                    {
                        "description": "Message sending request",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.OutboxMessageSentBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message sent successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.MessageSentRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "429": {
                        "description": "Too many requests, please try again later",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/outbox/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves an outbox message by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "06-Outbox"
                ],
                "summary": "Get outbox message by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outbox message retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.OutboxMessageGetRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Outbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Permanently deletes an outbox message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "06-Outbox"
                ],
                "summary": "Delete outbox message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Outbox message deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Outbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/outbox/{id}/archive": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Archives or unarchives an outbox message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "06-Outbox"
                ],
                "summary": "Archive outbox message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outbox message archived/unarchived successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Outbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/outbox/{id}/star": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stars or unstars an outbox message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "06-Outbox"
                ],
                "summary": "Star outbox message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outbox message starred/unstarred successfully",
                        "schema": {
                            "$ref": "#/definitions/genproto.Void"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Outbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/outbox/{id}/trash": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Moves an outbox message to the trash folder or gets it back if it is already in trash.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "06-Outbox"
                ],
                "summary": "Move outbox message to trash/untrash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outbox message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Outbox message moved to trash successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Outbox message not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the profile of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "03-User-profile"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/genproto.UserGetRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/recover-password": {
            "post": {
                "description": "Verifies the code and updates the password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "02-Password-recovery"
                ],
                "summary": "Recover password (Use this one after sending verification code)",
                "parameters": [
                    {
                        "description": "Recover Password Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UserRecoverPasswordReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password successfully updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Incorrect verification code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Verification code expired or email not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with email, username, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "01-Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UserCreateReqForSwagger"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "JWT tokens",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/send-code-again": {
            "post": {
                "description": "Sends a confirmation code to email recovery password again",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "02-Password-recovery"
                ],
                "summary": "Sends code again if user didn't recieve the code",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.ByEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Code sent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Page not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/set-pfp": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a profile image to user.",
                "consumes": [
                    "multipart/mixed"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "03-User-profile"
                ],
                "summary": "Set a profile picture",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Profile image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile image is added",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user's data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "03-User-profile"
                ],
                "summary": "Update user's profile. In order not to update any field, leave it as it is like \"string\" or \"\"",
                "parameters": [
                    {
                        "description": "User Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UserUpdateBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating User",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the password to new one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "03-User-profile"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Change Password Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UserChangePasswordReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password successfully updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Incorrect verification code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Verification code expired or email not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "genproto.AttachmentCreateRes": {
            "type": "object",
            "properties": {
                "file_id": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                }
            }
        },
        "genproto.AttachmentGetAllRes": {
            "type": "object",
            "properties": {
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.AttachmentGetRes"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/genproto.Pagination"
                }
            }
        },
        "genproto.AttachmentGetRes": {
            "type": "object",
            "properties": {
                "file_name": {
                    "type": "string"
                },
                "file_size": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "genproto.AttachmentIdsWrapper": {
            "type": "object",
            "properties": {
                "attachment_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "genproto.ByEmail": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "genproto.ConfirmUserReq": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "genproto.DraftCreateUpdateBody": {
            "type": "object",
            "properties": {
                "attachment_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "body": {
                    "type": "string"
                },
                "receivers": {
                    "$ref": "#/definitions/genproto.Receivers"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "genproto.InboxMessageGetRes": {
            "type": "object",
            "properties": {
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_archived": {
                    "type": "boolean"
                },
                "is_spam": {
                    "type": "boolean"
                },
                "is_starred": {
                    "type": "boolean"
                },
                "outbox": {
                    "$ref": "#/definitions/genproto.OutboxMessageGetRes"
                },
                "read_at": {
                    "type": "integer"
                },
                "receiver_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "genproto.InboxMessagesGetAllRes": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.InboxMessageGetRes"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/genproto.Pagination"
                }
            }
        },
        "genproto.LoginReq": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "genproto.MessageSendBCC": {
            "type": "object",
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "genproto.MessageSendCC": {
            "type": "object",
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "genproto.MessageSendTo": {
            "type": "object",
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "genproto.MessageSentRes": {
            "type": "object",
            "properties": {
                "failed_emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "total_failed": {
                    "type": "integer"
                },
                "total_sent": {
                    "type": "integer"
                }
            }
        },
        "genproto.OutboxMessageGetRes": {
            "type": "object",
            "properties": {
                "attachment_ids": {
                    "$ref": "#/definitions/genproto.AttachmentIdsWrapper"
                },
                "body": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_archived": {
                    "type": "boolean"
                },
                "is_draft": {
                    "type": "boolean"
                },
                "is_starred": {
                    "type": "boolean"
                },
                "receivers": {
                    "$ref": "#/definitions/genproto.Receivers"
                },
                "sender": {
                    "$ref": "#/definitions/genproto.UserGetRes"
                },
                "sent_at": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "genproto.OutboxMessageSentBody": {
            "type": "object",
            "properties": {
                "attachment_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "body": {
                    "type": "string"
                },
                "receivers": {
                    "$ref": "#/definitions/genproto.Receivers"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "genproto.OutboxMessagesGetAllRes": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.OutboxMessageGetRes"
                    }
                }
            }
        },
        "genproto.Pagination": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "skip": {
                    "type": "integer"
                }
            }
        },
        "genproto.Receivers": {
            "type": "object",
            "properties": {
                "bcc": {
                    "$ref": "#/definitions/genproto.MessageSendBCC"
                },
                "cc": {
                    "$ref": "#/definitions/genproto.MessageSendCC"
                },
                "to": {
                    "$ref": "#/definitions/genproto.MessageSendTo"
                }
            }
        },
        "genproto.UserChangePasswordReq": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                }
            }
        },
        "genproto.UserCreateReqForSwagger": {
            "type": "object",
            "properties": {
                "dob": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "genproto.UserGetRes": {
            "type": "object",
            "properties": {
                "dob": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "pfp_url": {
                    "type": "string"
                }
            }
        },
        "genproto.UserRecoverPasswordReq": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                }
            }
        },
        "genproto.UserUpdateBody": {
            "type": "object",
            "properties": {
                "dob": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "genproto.Void": {
            "type": "object"
        },
        "token.Tokens": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "User registration, login, and email confirmation methods",
            "name": "01-Authentication"
        },
        {
            "description": "Password recovery and reset functionality",
            "name": "02-Password-recovery"
        },
        {
            "description": "User profile management including updates and deletion",
            "name": "03-User-profile"
        },
        {
            "description": "Managing inbox messages such as reading, starring, and marking as spam",
            "name": "04-Inbox"
        },
        {
            "description": "Create, update, and send email drafts",
            "name": "05-Draft"
        },
        {
            "description": "Sending emails and managing sent items",
            "name": "06-Outbox"
        },
        {
            "description": "Handling email attachments including uploading and deleting",
            "name": "07-Attachments"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
