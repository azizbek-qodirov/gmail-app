// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.1
// source: gmailapp-submodule/attachment.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AttachmentService_Create_FullMethodName       = "/protos.AttachmentService/Create"
	AttachmentService_GetByID_FullMethodName      = "/protos.AttachmentService/GetByID"
	AttachmentService_GetAll_FullMethodName       = "/protos.AttachmentService/GetAll"
	AttachmentService_GetMyUploads_FullMethodName = "/protos.AttachmentService/GetMyUploads"
	AttachmentService_Delete_FullMethodName       = "/protos.AttachmentService/Delete"
)

// AttachmentServiceClient is the client API for AttachmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachmentServiceClient interface {
	Create(ctx context.Context, in *AttachmentCreateReq, opts ...grpc.CallOption) (*AttachmentCreateRes, error)
	GetByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*AttachmentGetRes, error)
	GetAll(ctx context.Context, in *AttachmentGetAllReq, opts ...grpc.CallOption) (*AttachmentGetAllRes, error)
	GetMyUploads(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*AttachmentGetAllRes, error)
	Delete(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*AttachmentDeleteRes, error)
}

type attachmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentServiceClient(cc grpc.ClientConnInterface) AttachmentServiceClient {
	return &attachmentServiceClient{cc}
}

func (c *attachmentServiceClient) Create(ctx context.Context, in *AttachmentCreateReq, opts ...grpc.CallOption) (*AttachmentCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentCreateRes)
	err := c.cc.Invoke(ctx, AttachmentService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) GetByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*AttachmentGetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentGetRes)
	err := c.cc.Invoke(ctx, AttachmentService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) GetAll(ctx context.Context, in *AttachmentGetAllReq, opts ...grpc.CallOption) (*AttachmentGetAllRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentGetAllRes)
	err := c.cc.Invoke(ctx, AttachmentService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) GetMyUploads(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*AttachmentGetAllRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentGetAllRes)
	err := c.cc.Invoke(ctx, AttachmentService_GetMyUploads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) Delete(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*AttachmentDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentDeleteRes)
	err := c.cc.Invoke(ctx, AttachmentService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentServiceServer is the server API for AttachmentService service.
// All implementations must embed UnimplementedAttachmentServiceServer
// for forward compatibility
type AttachmentServiceServer interface {
	Create(context.Context, *AttachmentCreateReq) (*AttachmentCreateRes, error)
	GetByID(context.Context, *ByID) (*AttachmentGetRes, error)
	GetAll(context.Context, *AttachmentGetAllReq) (*AttachmentGetAllRes, error)
	GetMyUploads(context.Context, *ByID) (*AttachmentGetAllRes, error)
	Delete(context.Context, *ByID) (*AttachmentDeleteRes, error)
	mustEmbedUnimplementedAttachmentServiceServer()
}

// UnimplementedAttachmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttachmentServiceServer struct {
}

func (UnimplementedAttachmentServiceServer) Create(context.Context, *AttachmentCreateReq) (*AttachmentCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAttachmentServiceServer) GetByID(context.Context, *ByID) (*AttachmentGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedAttachmentServiceServer) GetAll(context.Context, *AttachmentGetAllReq) (*AttachmentGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAttachmentServiceServer) GetMyUploads(context.Context, *ByID) (*AttachmentGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUploads not implemented")
}
func (UnimplementedAttachmentServiceServer) Delete(context.Context, *ByID) (*AttachmentDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAttachmentServiceServer) mustEmbedUnimplementedAttachmentServiceServer() {}

// UnsafeAttachmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachmentServiceServer will
// result in compilation errors.
type UnsafeAttachmentServiceServer interface {
	mustEmbedUnimplementedAttachmentServiceServer()
}

func RegisterAttachmentServiceServer(s grpc.ServiceRegistrar, srv AttachmentServiceServer) {
	s.RegisterService(&AttachmentService_ServiceDesc, srv)
}

func _AttachmentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).Create(ctx, req.(*AttachmentCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).GetByID(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).GetAll(ctx, req.(*AttachmentGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_GetMyUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).GetMyUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentService_GetMyUploads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).GetMyUploads(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).Delete(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

// AttachmentService_ServiceDesc is the grpc.ServiceDesc for AttachmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttachmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.AttachmentService",
	HandlerType: (*AttachmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AttachmentService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _AttachmentService_GetByID_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AttachmentService_GetAll_Handler,
		},
		{
			MethodName: "GetMyUploads",
			Handler:    _AttachmentService_GetMyUploads_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AttachmentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmailapp-submodule/attachment.proto",
}
